import Mathlib.Probability.Martingale.Convergence
import Mathlib.Probability.Martingale.OptionalStopping
import Mathlib.Probability.Martingale.OptionalSampling

set_option linter.unusedSectionVars false
set_option autoImplicit false
set_option linter.unusedTactic false
set_option linter.unusedVariables false
noncomputable section
open Filter
open scoped ENNReal NNReal Topology
/-

# Martingales
-/

/- We open namespaces. The effect is that after that command, we can call lemmas in those namespaces
without their namespace prefix: for example, we can write `inter_comm` instead of `Set.inter_comm`.
Hover over `open` if you want to learn more. -/
open MeasureTheory ProbabilityTheory Set

/- We define a measure space `Œ©`: a type with a `MeasurableSpace Œ©` variable (a œÉ-algebra) on which
we also define a mesure `P : Measure Œ©`.
We then state that `P` is a probability measure. That is, `P univ = 1`, where `univ : Set Œ©` is the
universal set in `Œ©` (the set that contains all `x : Œ©`). -/

-- ANCHOR: Variables
variable {Œ© : Type} {mŒ© : MeasurableSpace Œ©}
  {P : Measure Œ©} [IsProbabilityMeasure P]
-- ANCHOR_END: Variables

/- One can take the measure of a set `A`. -/
-- ANCHOR: ExProba
example {A : Set Œ©} : ‚Ñù‚â•0‚àû := P A
-- ANCHOR_END: ExProba

/- `‚Ñù‚â•0‚àû`, or `ENNReal`, is the type of extended non-negative real numbers, which contain `‚àû`.
Measures can in general take infinite values, but since our `‚Ñô` is a probability measure,
it actually takes only values up to 1.
`simp` knows that a probability measure is finite and will use the lemmas `measure_ne_top`
or `measure_lt_top` to prove that `‚Ñô A ‚â† ‚àû` or `‚Ñô A < ‚àû`.
The `finiteness` tactic is specialized in proving that `‚Ñù‚â•0‚àû` expressions are finite.

Hint: use `#check measure_ne_top` to see what that lemma does.

The operations on `‚Ñù‚â•0‚àû` are not as nicely behaved as on `‚Ñù`: `‚Ñù‚â•0‚àû` is not a ring and
subtraction truncates to zero for example. If you find that lemma `lemma_name` used to transform
an equation does not apply to `‚Ñù‚â•0‚àû`, try to find a lemma named something like
`ENNReal.lemma_name_of_something` and use that instead. -/

/- A stochastic process indexed by `‚Ñï`: a function `‚Ñï ‚Üí Œ© ‚Üí E`. Here `E` is a Banach space,
a complete normed space (that's what the martingale property needs).
We will often need a measurability condition on `X` in lemmas, but we don't add it yet. -/

-- ANCHOR: Variables2
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
  {mE : MeasurableSpace E} {X : ‚Ñï ‚Üí Œ© ‚Üí E}
-- ANCHOR_END: Variables2

/- A filtration: a monotone family of sub-œÉ-algebras indexed by `‚Ñï`.
Remember that you can learn about a definition by hovering over it, or by using ctrl-click to go to
its declaration. -/
-- ANCHOR: Filtration
variable {ùìï : Filtration ‚Ñï mŒ©}

example : ‚àÄ n, ùìï n ‚â§ mŒ© := Filtration.le ùìï

example {i j : ‚Ñï} (hij : i ‚â§ j) : ùìï i ‚â§ ùìï j := Filtration.mono ùìï hij
-- ANCHOR_END: Filtration

/-- If `X` is a martingale, then it is adapted to the filtration, which means that for all `n`,
`X n` is (strongly) measurable with respect to `ùìï n`. -/
-- ANCHOR: Martingale
example (hX : Martingale X ùìï P) : Adapted ùìï X := hX.adapted

example (hX : Martingale X ùìï P) (n : ‚Ñï) : StronglyMeasurable[ùìï n] (X n) := hX.adapted n

example [BorelSpace E] (hX : Martingale X ùìï P) (n : ‚Ñï) : Measurable[ùìï n] (X n) :=
  (hX.adapted n).measurable

/-- A martingale satisfies the following equality: for all `i ‚â§ j`, the conditional expectation of
`X j` with respect to `ùìï i` is equal to `X i`. -/
example (hX : Martingale X ùìï P) {i j : ‚Ñï} (hij : i ‚â§ j) : P[X j | ùìï i] =·µê[P] X i :=
  hX.condExp_ae_eq hij

/-- For a submartingale, the conditional expectation of `Y j` with respect to `ùìï i` is greater than
or equal to `Y i`. -/
example {Y : ‚Ñï ‚Üí Œ© ‚Üí ‚Ñù} (hX : Submartingale Y ùìï P) {i j : ‚Ñï} (hij : i ‚â§ j) :
    Y i ‚â§·µê[P] P[Y j | ùìï i] :=
  hX.ae_le_condExp hij
-- ANCHOR_END: Martingale

/-- **Almost everywhere martingale convergence theorem**: An L¬π-bounded submartingale converges
almost everywhere to a `‚®Ü n, ‚Ñ± n`-measurable function. -/
-- ANCHOR: AeTendstoLimitProcess
theorem ae_tendsto_limitProcess {Y : ‚Ñï ‚Üí Œ© ‚Üí ‚Ñù} (hY : Submartingale Y ùìï P)
    {R : ‚Ñù‚â•0} (hbdd : ‚àÄ n, eLpNorm (Y n) 1 P ‚â§ R) :
    ‚àÄ·µê œâ ‚àÇP, Tendsto (Y ¬∑ œâ) atTop (ùìù (ùìï.limitProcess Y P œâ)) := by
  classical
  suffices ‚àÉ g, StronglyMeasurable[‚®Ü n, ùìï n] g ‚àß ‚àÄ·µê œâ ‚àÇP, Tendsto (Y ¬∑ œâ) atTop (ùìù (g œâ)) by
    rw [Filtration.limitProcess, dif_pos this]
    exact (Classical.choose_spec this).2
  set g' : Œ© ‚Üí ‚Ñù := fun œâ ‚Ü¶ if h : ‚àÉ c, Tendsto (Y ¬∑ œâ) atTop (ùìù c) then h.choose else 0
  have hle : ‚®Ü n, ùìï n ‚â§ mŒ© := sSup_le fun m ‚ü®n, hn‚ü© ‚Ü¶ hn ‚ñ∏ ùìï.le _
  have hg' : ‚àÄ·µê œâ ‚àÇP.trim hle, Tendsto (Y ¬∑ œâ) atTop (ùìù (g' œâ)) := by
    filter_upwards [hY.exists_ae_trim_tendsto_of_bdd hbdd] with œâ hœâ
    simp_rw [g', dif_pos hœâ]
    exact hœâ.choose_spec
  have hg'm : AEStronglyMeasurable[‚®Ü n, ùìï n] g' (P.trim hle) :=
    (@aemeasurable_of_tendsto_metrizable_ae' _ _ (‚®Ü n, ùìï n) _ _ _ _ _ _ _
      (fun n ‚Ü¶ ((hY.stronglyMeasurable n).measurable.mono (le_sSup ‚ü®n, rfl‚ü© : ùìï n ‚â§ ‚®Ü n, ùìï n)
        le_rfl).aemeasurable) hg').aestronglyMeasurable
  obtain ‚ü®g, hgm, hae‚ü© := hg'm
  have hg : ‚àÄ·µê œâ ‚àÇP.trim hle, Tendsto (Y ¬∑ œâ) atTop (ùìù (g œâ)) := by
    filter_upwards [hae, hg'] with œâ hœâ hg'œâ using hœâ ‚ñ∏ hg'œâ
  exact ‚ü®g, hgm, measure_eq_zero_of_trim_eq_zero hle hg‚ü©
-- ANCHOR_END: AeTendstoLimitProcess

/-! ## Stopping times -/

/- A stopping time with respect to a filtration is a random time `œÑ : Œ© ‚Üí ‚Ñï` such that
for all `n`, the set `{œâ | œÑ œâ ‚â§ n}` is measurable with respect to `ùìï n`. -/

-- ANCHOR: Variables3
variable {œÑ : Œ© ‚Üí ‚Ñï‚àû} (hœÑ : IsStoppingTime ùìï œÑ)

example (i : ‚Ñï) : MeasurableSet[ùìï i] {œâ | œÑ œâ ‚â§ i} := hœÑ.measurableSet_le i
-- ANCHOR_END: Variables3

/-- **The optional stopping theorem** (fair game theorem): an adapted integrable process `Y`
is a submartingale if and only if for all bounded stopping times `œÑ` and `œÄ` such that `œÑ ‚â§ œÄ`, the
stopped value of `Y` at `œÑ` has expectation smaller than its stopped value at `œÄ`. -/
-- ANCHOR: submartingale_iff_expected_stoppedValue_mono
theorem submartingale_iff_expected_stoppedValue_mono' {Y : ‚Ñï ‚Üí Œ© ‚Üí ‚Ñù} (hadp : Adapted ùìï Y)
    (hint : ‚àÄ i, Integrable (Y i) P) :
    Submartingale Y ùìï P ‚Üî ‚àÄ œÑ œÄ : Œ© ‚Üí ‚Ñï‚àû, IsStoppingTime ùìï œÑ ‚Üí IsStoppingTime ùìï œÄ ‚Üí
      œÑ ‚â§ œÄ ‚Üí (‚àÉ N : ‚Ñï, ‚àÄ x, œÄ x ‚â§ N) ‚Üí P[stoppedValue Y œÑ] ‚â§ P[stoppedValue Y œÄ] :=
  ‚ü®fun hf _ _ hœÑ hœÄ hle ‚ü®_, hN‚ü© => hf.expected_stoppedValue_mono hœÑ hœÄ hle hN,
    submartingale_of_expected_stoppedValue_mono hadp hint‚ü©
-- ANCHOR_END: submartingale_iff_expected_stoppedValue_mono

/-- The stopped process of a submartingale with respect to a stopping time is a submartingale. -/
-- ANCHOR: Submartingale.stoppedProcess
protected theorem Submartingale.stoppedProcess {Y : ‚Ñï ‚Üí Œ© ‚Üí ‚Ñù} (h : Submartingale Y ùìï P)
    (hœÑ : IsStoppingTime ùìï œÑ) :
    Submartingale (stoppedProcess Y œÑ) ùìï P := by
  rw [submartingale_iff_expected_stoppedValue_mono]
  ¬∑ intro œÉ œÄ hœÉ hœÄ hœÉ_le_œÄ hœÄ_bdd
    simp_rw [stoppedValue_stoppedProcess]
    obtain ‚ü®n, hœÄ_le_n‚ü© := hœÄ_bdd
    have hœÄ_top œâ : œÄ œâ ‚â† ‚ä§ := ne_top_of_le_ne_top (by simp) (hœÄ_le_n œâ)
    have hœÉ_top œâ : œÉ œâ ‚â† ‚ä§ := ne_top_of_le_ne_top (hœÄ_top œâ) (hœÉ_le_œÄ œâ)
    simp only [ne_eq, hœÉ_top, not_false_eq_true, ‚ÜìreduceIte, hœÄ_top, ge_iff_le]
    exact h.expected_stoppedValue_mono (hœÉ.min hœÑ) (hœÄ.min hœÑ)
      (fun œâ => min_le_min (hœÉ_le_œÄ œâ) le_rfl) fun œâ => (min_le_left _ _).trans (hœÄ_le_n œâ)
  ¬∑ exact Adapted.stoppedProcess_of_discrete h.adapted hœÑ
  ¬∑ exact fun i =>
      h.integrable_stoppedValue ((isStoppingTime_const _ i).min hœÑ) fun œâ => min_le_left _ _
-- ANCHOR_END: Submartingale.stoppedProcess

/- See also the optional sampling theorem -/
#check Martingale.stoppedValue_min_ae_eq_condExp
